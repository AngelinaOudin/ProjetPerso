import { Injectable } from '@angular/core';
import { ModalComponent, AlertComponent, ConfirmComponent, LoadingComponent, ToastComponent, InfoConfirmComponent } from '../../components';
import { UtilProvider } from '../util/util';
import { I18nProvider } from '../i18n/i18n';
var ModalProvider = (function () {
    function ModalProvider(util, i18n) {
        this.util = util;
        this.i18n = i18n;
    }
    ModalProvider.prototype.alert = function (options) {
        return this.modal(AlertComponent, options, this.util.extend({
            title: this.i18n.get("__8"),
            width: 500,
            height: 315,
        }, options, true));
    };
    ModalProvider.prototype.confirm = function (options) {
        return this.modal(ConfirmComponent, options, this.util.extend({
            title: this.i18n.get("__8"),
            width: 500,
            height: 315,
        }, options, true));
    };
    ModalProvider.prototype.inforConfirm = function (options) {
        if (typeof options == "string") {
            options = {
                content: options,
            };
        }
        options.css = options.css || "content-left";
        return this.modal(InfoConfirmComponent, options, this.util.extend({
            width: 500,
            height: 200,
        }, options, true));
    };
    ModalProvider.prototype.loading = function (content, options) {
        return this.modal(LoadingComponent, {
            content: content,
        }, this.util.extend({
            width: content ? 200 : 146,
            height: content ? 200 : 146,
        }, options, true));
    };
    ModalProvider.prototype.modal = function (component, data, options) {
        return ModalComponent.Instance.create(component, data, options);
    };
    ModalProvider.prototype.toast = function (content) {
        if (typeof content == "string") {
            content = { content: content, };
        }
        ToastComponent.Instance.create(content);
    };
    return ModalProvider;
}());
export { ModalProvider };
ModalProvider.decorators = [
    { type: Injectable },
];
ModalProvider.ctorParameters = function () { return [
    { type: UtilProvider, },
    { type: I18nProvider, },
]; };
//# sourceMappingURL=modal.js.map