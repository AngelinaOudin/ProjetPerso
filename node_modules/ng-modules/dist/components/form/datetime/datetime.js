import { Directive, ElementRef, forwardRef } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { Input } from "@angular/core";
import { UtilProvider } from "../../../providers/util/util";
import { I18nProvider } from "../../../providers/i18n/i18n";
var DatetimeDirective = (function () {
    function DatetimeDirective(element, util) {
        this.element = element;
        this.util = util;
    }
    DatetimeDirective.prototype.writeValue = function (value) {
        if (value) {
            $(this.element.nativeElement).data("daterangepicker").setStartDate(value);
        }
    };
    DatetimeDirective.prototype._registerOnChange = function (data) { };
    DatetimeDirective.prototype.registerOnChange = function (fn) {
        this._registerOnChange = fn;
    };
    DatetimeDirective.prototype.touched = function () { };
    DatetimeDirective.prototype.registerOnTouched = function (fn) {
        this.touched = fn;
    };
    DatetimeDirective.prototype.setDisabledState = function (isDisabled) { };
    Object.defineProperty(DatetimeDirective.prototype, "datetime", {
        get: function () {
            return this._config;
        },
        set: function (value) {
            this._config = value;
            this.setting(value);
        },
        enumerable: true,
        configurable: true
    });
    ;
    DatetimeDirective.prototype.ngOnInit = function () {
    };
    DatetimeDirective.prototype.setting = function (config) {
        var data = this.util.extend({
            singleDatePicker: true,
            autoUpdateInput: false,
            locale: I18nProvider.get("dateSetting"),
        }, config, true);
        $(this.element.nativeElement).daterangepicker(data);
        var that = this;
        $(this.element.nativeElement).on('apply.daterangepicker', function (ev, picker) {
            var format = "YYYY-MM-DD";
            if (that.datetime && that.datetime.locale && that.datetime.locale.format) {
                format = that.datetime.locale.format;
            }
            that._registerOnChange(picker.startDate.format(format));
            $(this).val(picker.startDate.format(format));
        });
        $(this.element.nativeElement).on('cancel.daterangepicker', function (ev, picker) {
        });
    };
    return DatetimeDirective;
}());
export { DatetimeDirective };
DatetimeDirective.decorators = [
    { type: Directive, args: [{
                selector: "[datetime]",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DatetimeDirective; }), multi: true }
                ],
            },] },
];
DatetimeDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: UtilProvider, },
]; };
DatetimeDirective.propDecorators = {
    'datetime': [{ type: Input, args: ["datetime",] },],
};
//# sourceMappingURL=datetime.js.map