import { Component, ElementRef, HostListener, Renderer2, Optional } from "@angular/core";
import { NgModel, NgControl, NG_VALUE_ACCESSOR } from "@angular/forms";
var SelectorComponent = (function () {
    function SelectorComponent(element, renderer2, ngModel, ngControl) {
        this.element = element;
        this.renderer2 = renderer2;
        this.ngModel = ngModel;
        this.ngControl = ngControl;
    }
    SelectorComponent.prototype.writeValue = function (obj) {
        throw new Error("Method not implemented.");
    };
    SelectorComponent.prototype.registerOnChange = function (fn) {
        throw new Error("Method not implemented.");
    };
    SelectorComponent.prototype.registerOnTouched = function (fn) {
        throw new Error("Method not implemented.");
    };
    SelectorComponent.prototype.setDisabledState = function (isDisabled) {
        throw new Error("Method not implemented.");
    };
    SelectorComponent.prototype.ngOnInit = function () {
        this.parentElement = this.element.nativeElement.parentElement;
    };
    SelectorComponent.prototype.focus = function (e) {
        this.renderer2.addClass(this.element.nativeElement, "focus");
        this.renderer2.addClass(this.parentElement, "focus");
    };
    SelectorComponent.prototype.blur = function (e) {
        this.renderer2.removeClass(this.element.nativeElement, "focus");
        this.renderer2.removeClass(this.parentElement, "focus");
    };
    return SelectorComponent;
}());
export { SelectorComponent };
SelectorComponent.decorators = [
    { type: Component, args: [{
                selector: "selector",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useClass: SelectorComponent }
                ],
                template: ""
            },] },
];
SelectorComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NgModel, decorators: [{ type: Optional },] },
    { type: NgControl, decorators: [{ type: Optional },] },
]; };
SelectorComponent.propDecorators = {
    'focus': [{ type: HostListener, args: ["focus", ["$event"],] },],
    'blur': [{ type: HostListener, args: ["blur", ["$event"],] },],
};
//# sourceMappingURL=selector.js.map