import { ViewContainerRef, ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { DomProvider } from '../../providers/dom/dom';
import { AnimationProvider } from '../../providers/animation/animation';
export interface ComponentItem {
    container?: HTMLElement;
    content: any;
    component?: ComponentRef<any>;
    promise?: {
        resolve;
        reject;
    };
    destroy: () => void;
    data: any;
    options?: ModalOptions;
    title?: string;
    backgroundClick?: boolean;
    transparent?: boolean;
    animation?: string;
    animationState?: string;
    timeout?: number;
}
export interface ModalOptions {
    width?: number;
    height?: number;
    title?: string;
    backgroundClick?: boolean;
    headerCss?: string;
    transparent?: boolean;
    overlayCss?: string;
    animation?: string;
    timeout?: number;
}
export declare class ModalComponent {
    private componentFactoryResolver;
    private cdr;
    private domProvider;
    private animation;
    static Instance: ModalComponent;
    list: ComponentItem[];
    constructor(componentFactoryResolver: ComponentFactoryResolver, cdr: ChangeDetectorRef, domProvider: DomProvider, animation: AnimationProvider);
    ngOnInit(): void;
    create(component: any, data?: any, options?: ModalOptions): Promise<any> & {
        destroy: () => void;
    };
    createInstance(index: number, comp: ComponentRef<any>): void;
}
export declare class ModalContentComponent {
    private view;
    private componentFactoryResolver;
    private injector;
    private router;
    container: any;
    modalItem: ComponentItem;
    modalContent: any;
    data: any;
    index: any;
    constructor(view: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector, router: Router);
    ngOnInit(): void;
}
