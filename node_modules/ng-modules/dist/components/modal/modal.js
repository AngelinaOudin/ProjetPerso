import { Component, ViewContainerRef, Directive, Input, ComponentFactoryResolver, ChangeDetectorRef, Injector, ReflectiveInjector } from '@angular/core';
import { Router } from '@angular/router';
import { ModalController } from '../../providers/modal/modalController';
import { DomProvider } from '../../providers/dom/dom';
import { AnimationProvider } from '../../providers/animation/animation';
var ModalComponent = (function () {
    function ModalComponent(componentFactoryResolver, cdr, domProvider, animation) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.cdr = cdr;
        this.domProvider = domProvider;
        this.animation = animation;
        this.list = [];
    }
    ModalComponent.prototype.ngOnInit = function () {
        ModalComponent.Instance = this;
    };
    ModalComponent.prototype.create = function (component, data, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        try {
            options.width = options.width || 600;
            options.height = options.height || 400;
            var resolve_1, reject_1;
            var promise = new Promise(function (r, j) { resolve_1 = r; reject_1 = j; });
            var scrollFn_1 = function (e) {
                var direction;
                e.wheelDelta > 0 && (direction = 1);
                e.wheelDelta < 0 && (direction = -1);
                if (item_1.container) {
                    if (!_this.domProvider.checkIsParent(item_1.container, e.toElement)
                        || _this.domProvider.checkIsScrollToEnd(e.toElement, direction)) {
                        e.preventDefault();
                    }
                }
            };
            document.addEventListener("wheel", scrollFn_1);
            var item_1 = {
                animation: options.animation,
                animationState: options.animation || '' + ".init",
                title: options.title,
                backgroundClick: options.backgroundClick,
                transparent: options.transparent,
                options: options,
                content: component,
                promise: {
                    resolve: resolve_1,
                    reject: reject_1,
                },
                destroy: function () {
                    _this.list.some(function (ci, index) {
                        if (ci == item_1) {
                            if (item_1.component.instance.ngOnDestroy) {
                                var result = item_1.component.instance.ngOnDestroy();
                                if (result) {
                                    resolve_1();
                                }
                                else {
                                    reject_1();
                                }
                            }
                            else {
                                resolve_1();
                            }
                            _this.list.splice(index, 1);
                            return true;
                        }
                    });
                    document.removeEventListener("wheel", scrollFn_1);
                    _this.cdr.detectChanges();
                },
                data: data,
            };
            this.list.push(item_1);
            this.cdr.detectChanges();
            if (options.timeout > 0) {
                setTimeout(function () {
                    item_1.promise.resolve();
                    item_1.destroy();
                }, options.timeout);
            }
            promise.destroy = function () {
                item_1.destroy();
            };
            return promise;
        }
        catch (e) {
            console.error(e);
        }
    };
    ModalComponent.prototype.createInstance = function (index, comp) {
        var item = this.list[index];
        item.component = comp;
        item.animationState = item.animation + ".on";
        var animation = item.animation;
        if (this.animation[animation]) {
            this.animation[animation](item.container);
        }
    };
    return ModalComponent;
}());
export { ModalComponent };
ModalComponent.Instance = null;
ModalComponent.decorators = [
    { type: Component, args: [{
                template: "<div *ngFor=\"let item of list;let index=index;\"> <div class=\"modal\" [class.transparent]=\"item.transparent\"> <div class=\"background-overlay\" [class]='\"background-overlay \"+(item.options?.overlayCss||\"\")' (click)=\"item.backgroundClick&&item.destroy()\"></div> <div class=\"container\" #container [class.hasHeader]=\"item.title\" [ngStyle]='{width:item.options?.width+\"px\",height:item.options?.height+\"px\"}'> <div class=\"header\" *ngIf=\"item.title\"> <h4 [innerHTML]=\"item.title\" [moveable]=\"container\" [class]='item.options?.headerCss||\"\"'></h4> <div class=\"modal-close\" (click)=\"item.destroy()\" [title]=\"'__4' | I18N\"> <span class=\"io-close\"></span> </div> </div> <ng-template [modal-contaner]=\"container\" [modal-item]=\"item\" [modal-content]=\"item.content\" [index]=\"index\" [modal-data]=\"item.data\"></ng-template> </div> </div> </div> <toast-view></toast-view> ",
                styles: [".modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 999;\n  display: block;\n}\n.modal.transparent {\n  pointer-events: none;\n}\n.modal.transparent .background-overlay {\n  display: none;\n}\n.modal.transparent .container {\n  pointer-events: all;\n  box-shadow: 0 0 20px #ededed;\n}\n.modal .background-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.modal .container {\n  position: absolute;\n  display: inline-block;\n  background-color: #fff;\n  margin: auto;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  padding: 0;\n  border-radius: 6px;\n  overflow: hidden;\n}\n.modal .container.hasHeader {\n  padding-top: 60px;\n}\n.modal .container .header {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 60px;\n  background-color: #EBF0F7;\n}\n.modal .container .header > h4 {\n  user-select: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  left: 0;\n  text-align: center;\n  line-height: 60px;\n  color: #112F59;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  margin: 0;\n  padding: 0 50px;\n  font-size: 20px;\n}\n.modal .container .header .modal-close {\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 10px;\n  bottom: 0;\n  margin: auto;\n  font-family: serif;\n  top: 0;\n  font-size: 24px;\n  color: #eaeaea;\n  text-align: center;\n  user-select: none;\n  cursor: pointer;\n}\n.modal .container .header .modal-close:hover {\n  color: #fff;\n}"],
                selector: "modal-view",
            },] },
];
ModalComponent.ctorParameters = function () { return [
    { type: ComponentFactoryResolver, },
    { type: ChangeDetectorRef, },
    { type: DomProvider, },
    { type: AnimationProvider, },
]; };
var ModalContentComponent = (function () {
    function ModalContentComponent(view, componentFactoryResolver, injector, router) {
        this.view = view;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.router = router;
    }
    ModalContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.modalItem.container = this.container;
        if (this.modalContent) {
            try {
                var component = this.modalContent.component || this.modalContent;
                var resolver = this.modalContent.resolver || this.componentFactoryResolver;
                var factory = resolver.resolveComponentFactory(component);
                var modalParams = new ModalController(this.data);
                modalParams.sendMessage = function (data) {
                    _this.modalItem.promise.resolve(data);
                };
                modalParams.sendError = function (data) {
                    _this.modalItem.promise.reject(data);
                };
                modalParams.close = function () {
                    _this.modalItem.destroy();
                };
                var injector = ReflectiveInjector.resolveAndCreate([
                    {
                        provide: component,
                        useValue: component,
                    },
                    {
                        provide: ModalController,
                        useValue: modalParams,
                    }
                ], this.modalContent.injector);
                var comp = this.view.createComponent(factory, 0, injector);
                ModalComponent.Instance.createInstance(this.index, comp);
            }
            catch (e) {
                console.error(e);
            }
        }
    };
    return ModalContentComponent;
}());
export { ModalContentComponent };
ModalContentComponent.decorators = [
    { type: Directive, args: [{
                selector: "[modal-content]",
            },] },
];
ModalContentComponent.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: Injector, },
    { type: Router, },
]; };
ModalContentComponent.propDecorators = {
    'container': [{ type: Input, args: ["modal-contaner",] },],
    'modalItem': [{ type: Input, args: ["modal-item",] },],
    'modalContent': [{ type: Input, args: ["modal-content",] },],
    'data': [{ type: Input, args: ["modal-data",] },],
    'index': [{ type: Input },],
};
//# sourceMappingURL=modal.js.map