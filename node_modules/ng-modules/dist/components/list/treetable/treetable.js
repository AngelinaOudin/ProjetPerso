var Treetable = (function () {
    function Treetable() {
    }
    Treetable.prototype.calcDeep = function (item, deep) {
        var _this = this;
        if (deep === void 0) { deep = 0; }
        item.map(function (node, index) {
            node.$$deep = deep + 1;
            node.$$same = item;
            node.$$index = index;
            node.$$expand = false;
            if (deep == 0)
                node.$$root = item;
            if (node.children) {
                node.children.map(function (child) {
                    child.$$parent = item;
                    if (deep == 0)
                        child.$$root = item;
                    else
                        child.$$root = node.$$root;
                });
                _this.calcDeep(node.children, deep + 1);
            }
        });
        return item;
    };
    Treetable.prototype.calcDeepStyle = function (item) {
        var style = {
            'padding-left': item.$$deep * 10 + "px",
        };
        return style;
    };
    Treetable.prototype.findAllExpanded = function (item) {
        var _this = this;
        var data = [];
        if (item.$$expand && item.children) {
            data.push(item);
            item.children.map(function (node) {
                if (node.$$expand) {
                    data = data.concat(_this.findAllExpanded(node));
                }
            });
        }
        return data;
    };
    Treetable.prototype.expand = function (item) {
        var _this = this;
        var parent = item.$$root;
        var index = item.$$index;
        if (item.children) {
            parent.some(function (node, i) {
                if (node == item) {
                    if (!item.$$expand) {
                        var data_1 = [i + 1, 0];
                        item.children.map(function (childNode) { return data_1.push(childNode); });
                        parent.splice.apply(parent, data_1);
                        item.$$expand = !item.$$expand;
                    }
                    else {
                        var allExpand = _this.findAllExpanded(item);
                        allExpand.reverse();
                        allExpand.map(function (item) {
                            item.$$root.some(function (node, index) {
                                if (node == item) {
                                    item.$$root.splice(index + 1, node.children.length);
                                    item.$$expand = !item.$$expand;
                                    return true;
                                }
                            });
                        });
                    }
                    return true;
                }
            });
        }
    };
    return Treetable;
}());
export { Treetable };
//# sourceMappingURL=treetable.js.map