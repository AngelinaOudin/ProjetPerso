import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef, ContentChild, TemplateRef, ContentChildren, Directive } from '@angular/core';
import { Treetable } from './treetable/treetable';
var ListCellComponent = (function () {
    function ListCellComponent() {
    }
    return ListCellComponent;
}());
export { ListCellComponent };
ListCellComponent.decorators = [
    { type: Directive, args: [{
                selector: "list-cell",
            },] },
];
ListCellComponent.ctorParameters = function () { return []; };
ListCellComponent.propDecorators = {
    'name': [{ type: Input },],
    'prop': [{ type: Input },],
    'useTemplate': [{ type: Input },],
    'headerTemplate': [{ type: Input },],
    'width': [{ type: Input },],
    'css': [{ type: Input },],
    'invisiable': [{ type: Input },],
    'template': [{ type: ContentChild, args: [TemplateRef,] },],
};
var ListComponent = (function () {
    function ListComponent(cdr) {
        this.cdr = cdr;
        this.treetableInstance = new Treetable;
        this._treetable = false;
        this.manual = false;
        this.innerTemplates = {
            datetime: {},
            treetableTmp: {},
        };
        this.templates = {};
        this.tableWidth = 0;
        this._pageSize = 10;
        this.pageIndex = 1;
        this.pageTotalIndex = 40;
        this.onpage = new EventEmitter();
    }
    Object.defineProperty(ListComponent.prototype, "treetable", {
        get: function () {
            return this._treetable;
        },
        set: function (isTreetable) {
            if (typeof isTreetable == "string") {
                this._treetable = true;
            }
            else {
                this._treetable = isTreetable;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "datetime", {
        set: function (template) {
            this.innerTemplates.datetime = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "treetableTmp", {
        set: function (template) {
            this.innerTemplates.treetableTmp = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "cellTemplates", {
        get: function () {
            return this._cellTemplates;
        },
        set: function (templates) {
            var _this = this;
            this._cellTemplates = templates;
            var headers = [];
            templates.map(function (item) {
                if (typeof item.useTemplate == "string") {
                    item.useTemplate = _this.innerTemplates[item.useTemplate];
                }
                if (!item.useTemplate) {
                    if (item.template) {
                        item.useTemplate = item.template;
                    }
                }
                headers.push(item);
            });
            if (this.treetable) {
                headers.unshift({
                    useTemplate: this.innerTemplates.treetableTmp,
                    width: 40,
                    css: "text-left",
                });
            }
            if (headers.length) {
                this.headers = headers;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ListComponent.prototype, "totalSize", {
        get: function () {
            return this._totalSize;
        },
        set: function (totalSize) {
            this._totalSize = totalSize;
            this.pageTotalIndex = Math.ceil(totalSize / (this.pageSize || 1));
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ListComponent.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (pageSize) {
            this._pageSize = pageSize;
            this.pageTotalIndex = Math.ceil((this.totalSize || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ListComponent.prototype, "headers", {
        get: function () {
            return this._headers;
        },
        set: function (values) {
            var _this = this;
            if (!values) {
                return;
            }
            if (typeof values == "string") {
                var valuesArr = values.split(",");
                var headers = valuesArr.map(function (item) {
                    return {
                        name: item,
                        prop: item,
                    };
                });
                this._headers = headers;
            }
            else {
                values.map(function (item) {
                    if (typeof item.useTemplate == "string") {
                        item.useTemplate = _this.innerTemplates[item.useTemplate];
                    }
                    item.oriWidth = item.width;
                });
                var _values_1 = [];
                values.map(function (item) {
                    if (item.invisiable) {
                        return;
                    }
                    _values_1.push(item);
                });
                this._headers = _values_1;
            }
            this.calcHeaders(this._headers);
        },
        enumerable: true,
        configurable: true
    });
    ;
    ListComponent.prototype.calcHeaders = function (headers) {
        if (this.flat || !headers) {
            return;
        }
        var totalWidth = this.container.nativeElement.clientWidth - headers.length - 10;
        var expectWidth = 0;
        headers.map(function (item) {
            item.width = parseFloat(item.oriWidth) || 0;
            expectWidth += item.width;
        });
        var tableWidth = 0;
        if (expectWidth < totalWidth) {
            headers.map(function (item) {
                item.width = (parseInt((item.width / expectWidth) * 10000) / 10000 * totalWidth) || (totalWidth / headers.length);
                tableWidth += item.width;
            });
        }
        this.tableWidth = tableWidth || expectWidth;
    };
    ListComponent.prototype.recalHeader = function () {
        var _this = this;
        this.cdr.detectChanges();
        setTimeout(function () {
            _this.cellTemplates = _this.listCellTep;
        }, 1);
    };
    ListComponent.prototype.refresh = function () {
        this.toPage(this.pageIndex);
    };
    ListComponent.prototype.toPage = function (pageIndex) {
        var _this = this;
        if (this.loadingStatus) {
            return;
        }
        this.loadingStatus = true;
        pageIndex = parseInt(pageIndex);
        pageIndex - this.pageTotalIndex >= 0 && (pageIndex = this.pageTotalIndex);
        pageIndex <= 0 && (pageIndex = 1);
        var data = {};
        data.isFirst = this.list ? false : true;
        data.pageSize = this.pageSize;
        data.pageIndex = pageIndex;
        data.complete = function (e) {
            _this.loadingStatus = false;
            _this.complete(e);
        };
        this.pageIndex = pageIndex;
        this.inputPageIndex = pageIndex;
        this.onpage.emit(data);
    };
    ListComponent.prototype.complete = function (e) {
        if (this.pageIndex > 1) {
            if (e.list.length == 0) {
                return this.toPage(this.pageIndex - 1);
            }
        }
        this.totalSize = e.totalSize;
        if (this.treetable) {
            this.treetableInstance.calcDeep(e.list);
        }
        this.list = e.list;
        this.cdr.detectChanges();
    };
    ListComponent.prototype.inputPageKeyUp = function (e) {
        if (e.keyCode == 13) {
            this.inputPageIndex = this.inputPageIndex || 1;
            var index = (+this.inputPageIndex);
            if (index == this.inputPageIndex) {
                this.toPage(this.inputPageIndex);
            }
            else {
                this.inputPageIndex = this.pageIndex;
            }
        }
    };
    ListComponent.prototype.ngOnInit = function () {
        var _this = this;
        window.addEventListener("resize", this.resizeFn = function () {
            _this.calcHeaders(_this._headers);
        });
        if (!this.manual) {
            this.toPage(1);
        }
    };
    ListComponent.prototype.ngOnDestroy = function () {
        window.removeEventListener("resize", this.resizeFn);
    };
    return ListComponent;
}());
export { ListComponent };
ListComponent.decorators = [
    { type: Component, args: [{
                selector: "list",
                template: "<!-- \u5217\u8868 --> <div class=\"table-container show-scrollbar\" [class.hide]=\"flat\"> <div #container> <table [ngStyle]=\"{width:(tableWidth+'px')}\" *ngIf=\"!flat\"> <colgroup [width]=\"tableWidth\"> <col *ngFor=\"let item of headers\" [width]=\"item.width\"> </colgroup> <thead> <tr> <th *ngFor=\"let item of headers\"> <div *ngIf=\"!item.headerTemplate\">{{item.name}}</div> <div *ngIf=\"item.headerTemplate\"> <ng-container *ngTemplateOutlet=\"item.headerTemplate;context: {$implicit: item, header:item, prop:item.prop};\"> </ng-container> </div> </th> </tr> </thead> <tbody> <tr *ngFor=\"let row of list;let index=index;\"> <td *ngFor=\"let item of headers\" [class]=\"item.css\" [ngStyle]=\"{'max-width':item.width+'px'}\"> <div *ngIf=\"!item.useTemplate&&!templates[item.prop]\" [title]=\"row[item.prop]||''\">{{row[item.prop]||''}}</div> <div *ngIf=\"item.useTemplate||templates[item.prop]\"> <ng-container *ngTemplateOutlet=\"item.useTemplate||templates[item.prop];context: {$implicit: row, row: row,value:row[item.prop],index:index,prop:item.prop};\"> </ng-container> </div> </td> </tr> </tbody> </table> </div> </div> <!-- \u5B8C\u5168\u81EA\u5B9A\u4E49\u5217\u8868 --> <div class=\"flat-list-container\" *ngIf=\"flat\"> <div *ngFor=\"let row of list;let index=index;\"> <ng-container *ngTemplateOutlet=\"contentTemplates?.first;context: {$implicit:row,row:row,index:index};\"></ng-container> </div> </div> <!-- \u5206\u9875 --> <div class=\"page-navigator\" *ngIf=\"totalSize\"> <div class=\"page-input\"> <span>{{'__6' | I18N}}</span> <input [(ngModel)]=\"inputPageIndex\" (keyup)=\"inputPageKeyUp($event)\"> <span>{{'__7' | I18N}}</span> </div> <div class=\"page-no\"> <span (click)=\"toPage(pageIndex-1)\"> <i class=\"fa fa-angle-left\"></i> </span> <span (click)=\"toPage(pageIndex-4)\" *ngIf=\"pageIndex-4>0\">{{pageIndex-4}}</span> <span (click)=\"toPage(pageIndex-3)\" *ngIf=\"pageIndex-3>0\">{{pageIndex-3}}</span> <span (click)=\"toPage(pageIndex-2)\" *ngIf=\"pageIndex-2>0\">{{pageIndex-2}}</span> <span (click)=\"toPage(pageIndex-1)\" *ngIf=\"pageIndex-1>0\">{{pageIndex-1}}</span> <span (click)=\"toPage(pageIndex)\" *ngIf=\"pageIndex>0\" class=\"active\">{{pageIndex}}</span> <span (click)=\"toPage(pageIndex+1)\" *ngIf=\"pageIndex+1<pageTotalIndex&&(pageIndex+1!=(pageToalIndex-3))\">{{pageIndex+1}}</span> <span (click)=\"toPage(pageIndex+2)\" *ngIf=\"pageIndex+2<pageTotalIndex&&(pageIndex+2!=(pageToalIndex-2))\">{{pageIndex+2}}</span> <span (click)=\"toPage(pageIndex+3)\" *ngIf=\"pageIndex+3<pageTotalIndex&&(pageIndex+3!=(pageToalIndex-1))\">\u00B7\u00B7\u00B7</span> <span (click)=\"toPage(pageTotalIndex)\" *ngIf=\"pageIndex!=pageTotalIndex\">{{pageTotalIndex}}</span> <span (click)=\"toPage(pageIndex+1)\"> <i class=\"fa fa-angle-right\"></i> </span> </div> <div class=\"loading\" *ngIf=\"loadingStatus\"> <!-- svgloading --> <svg width=\"30\" height=\"30\" viewBox=\"0 0 120 30\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#fff\"> <circle cx=\"15\" cy=\"15\" r=\"15\"> <animate attributeName=\"r\" from=\"15\" to=\"15\" begin=\"0s\" dur=\"0.8s\" values=\"15;9;15\" calcMode=\"linear\" repeatCount=\"indefinite\" /> <animate attributeName=\"fill-opacity\" from=\"1\" to=\"1\" begin=\"0s\" dur=\"0.8s\" values=\"1;.5;1\" calcMode=\"linear\" repeatCount=\"indefinite\" /> </circle> <circle cx=\"60\" cy=\"15\" r=\"9\" fill-opacity=\"0.3\"> <animate attributeName=\"r\" from=\"9\" to=\"9\" begin=\"0s\" dur=\"0.8s\" values=\"9;15;9\" calcMode=\"linear\" repeatCount=\"indefinite\" /> <animate attributeName=\"fill-opacity\" from=\"0.5\" to=\"0.5\" begin=\"0s\" dur=\"0.8s\" values=\".5;1;.5\" calcMode=\"linear\" repeatCount=\"indefinite\" /> </circle> <circle cx=\"105\" cy=\"15\" r=\"15\"> <animate attributeName=\"r\" from=\"15\" to=\"15\" begin=\"0s\" dur=\"0.8s\" values=\"15;9;15\" calcMode=\"linear\" repeatCount=\"indefinite\" /> <animate attributeName=\"fill-opacity\" from=\"1\" to=\"1\" begin=\"0s\" dur=\"0.8s\" values=\"1;.5;1\" calcMode=\"linear\" repeatCount=\"indefinite\" /> </circle> </svg> </div> </div> <ng-content></ng-content> <!-- \u9884\u5B9A\u4E49\u6A21\u677F --> <ng-template #datetime let-prop=\"prop\" let-value=\"value\"> <span>{{value|Datetime}}</span> </ng-template> <!-- treetable \u6A21\u677F --> <ng-template let-item #treetableTmp> <div class=\"node-deep\" [ngStyle]=\"treetableInstance.calcDeepStyle(item)\"> <span class=\"fa\" [class.fa-square-o]=\"!item.children?.length\" [class.fa-plus-square-o]=\"item.children?.length&&!item.$$expand\" [class.fa-minus-square-o]=\"item.children?.length&&item.$$expand\" (click)=\"treetableInstance.expand(item)\"></span> </div> </ng-template> ",
                styles: [".table-container {\n  width: 100%;\n  overflow: auto;\n  padding: 5px;\n}\n.table-container table {\n  border-collapse: collapse;\n}\n.table-container table thead {\n  background-color: #EEF1F6;\n}\n.table-container table thead tr {\n  height: 44px;\n}\n.table-container table th,\n.table-container table td {\n  padding: 2px;\n  text-align: center;\n  border: 1px solid #ededed;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.table-container table th > *,\n.table-container table td > * {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.table-container table th.text-left,\n.table-container table td.text-left {\n  text-align: left;\n}\n.table-container table tbody tr {\n  height: 36px;\n  font-size: 16px;\n}\n.table-container table tbody tr:nth-child(2n) {\n  background-color: #fff;\n}\n.table-container table tbody tr:nth-child(2n-1) {\n  background-color: #fafafa;\n}\n.table-container table tbody tr:hover {\n  background-color: #f7f7f0;\n}\n\n.page-navigator {\n  display: inline-block;\n  width: 100%;\n  padding: 5px 0;\n  user-select: none;\n}\n.page-navigator .loading {\n  display: inline-block;\n  height: 30px;\n  width: 30px;\n  margin-right: 16px;\n  float: right;\n}\n.page-navigator .loading svg {\n  fill: #16a085;\n}\n.page-navigator .page-no {\n  display: inline-block;\n  float: right;\n  line-height: 30px;\n}\n.page-navigator .page-no > span {\n  border: 1px solid #D1DBE5;\n  border-right: none;\n  padding: 0;\n  cursor: pointer;\n  min-width: 30px;\n  height: 30px;\n  display: inline-block;\n  float: left;\n  font-size: 14px;\n  text-align: center;\n}\n.page-navigator .page-no > span:first-child {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.page-navigator .page-no > span:last-child {\n  border-right: 1px solid #D1DBE5;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.page-navigator .page-no > span:hover {\n  color: #16a085;\n}\n.page-navigator .page-no > span.active {\n  color: #fff;\n  background-color: #16a085;\n}\n.page-navigator .page-input {\n  display: inline-block;\n  float: right;\n  font-size: 14px;\n  line-height: 30px;\n  margin-left: 10px;\n}\n.page-navigator .page-input input {\n  border-radius: 3px;\n  width: 38px;\n  height: 26px;\n  border: 1px solid #D1DBE5;\n  padding: 0 2px;\n  text-align: center;\n}\n.page-navigator .page-input input:focus {\n  outline: none;\n}\n\n.flat-list-container > div {\n  display: initial;\n}"],
            },] },
];
ListComponent.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
]; };
ListComponent.propDecorators = {
    'treetable': [{ type: Input },],
    'manual': [{ type: Input },],
    'datetime': [{ type: ViewChild, args: ["datetime",] },],
    'treetableTmp': [{ type: ViewChild, args: ["treetableTmp",] },],
    'contentTemplates': [{ type: ContentChildren, args: [TemplateRef,] },],
    'listCellTep': [{ type: ContentChildren, args: [ListCellComponent,] },],
    'cellTemplates': [{ type: ContentChildren, args: [ListCellComponent,] },],
    'flat': [{ type: Input },],
    'templates': [{ type: Input },],
    'list': [{ type: Input },],
    'totalSize': [{ type: Input },],
    'pageSize': [{ type: Input },],
    'container': [{ type: ViewChild, args: ["container",] },],
    'headers': [{ type: Input },],
    'onpage': [{ type: Output, args: ["onpage",] },],
};
//# sourceMappingURL=list.js.map